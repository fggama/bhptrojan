environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'ANDROID_HOME': 'C:\\Users\\HP-ENVY\\AppData\\Local\\Android\\sdk', 'APPDATA': 'C:\\Users\\HP-ENVY\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'FREDDY-GAMA', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EIGEN3_DIR': 'C:\\Users\\HP-ENVY\\Documents\\AndroidLibs\\eigen-eigen-5a0156e40feb', 'GDAL_DATA': 'C:\\Program Files\\PostgreSQL\\12\\gdal-data', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\HP-ENVY', 'JD2_HOME': 'C:\\Users\\HP-ENVY\\AppData\\Local\\JDownloader 2.0', 'LOCALAPPDATA': 'C:\\Users\\HP-ENVY\\AppData\\Local', 'LOGONSERVER': '\\\\FREDDY-GAMA', 'MSMPI_BIN': 'C:\\Program Files\\Microsoft MPI\\Bin\\', 'MYSQLCONNECTOR_ASSEMBLIESPATH': 'C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 8.0.26\\Assemblies\\v4.8', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\HP-ENVY\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\HP-ENVY\\OneDrive', 'ONLINESERVICES': 'Online Services', 'OPENCV_ANDROID_SDK': 'C:\\Users\\HP-ENVY\\Documents\\AndroidLibs\\OpenCV-android-sdk', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files\\Microsoft\\jdk-11.0.12.7-hotspot\\bin;C:\\Program Files\\AdoptOpenJDK\\jre-11.0.7.10-hotspot\\bin;C:\\Program Files\\Microsoft MPI\\Bin\\;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\140\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\140\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Java\\jdk1.8.0_172\\bin;C:\\Program Files (x86)\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Common Files\\Autodesk Shared\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python37_64;C:\\Program Files\\Graphviz\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;C:\\Program Files\\dotnet\\;C:\\Users\\HP-ENVY\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\HP-ENVY\\AppData\\Local\\GitHubDesktop\\bin;C:\\Users\\HP-ENVY\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files (x86)\\Nmap;C:\\Users\\HP-ENVY\\.dotnet\\tools;C:\\Program Files\\OpenVPN\\bin;C:\\Users\\HP-ENVY\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\HP-ENVY\\AppData\\Local\\Programs\\Python\\Python39\\Scripts;C:\\Users\\HP-ENVY\\AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PLATFORMCODE': 'KV', 'POSTGIS_ENABLE_OUTDB_RASTERS': '1', 'POSTGIS_GDAL_ENABLED_DRIVERS': 'GTiff PNG JPEG GIF XYZ DTED USGSDEM AAIGrid', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 9, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '8e09', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Users\\HP-ENVY\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\Tools\\PowerShell\\Modules\\', 'PUBLIC': 'C:\\Users\\Public', 'REGIONCODE': 'NA', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\HP-ENVY\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\HP-ENVY\\AppData\\Local\\Temp', 'USERDOMAIN': 'FREDDY-GAMA', 'USERDOMAIN_ROAMINGPROFILE': 'FREDDY-GAMA', 'USERNAME': 'HP-ENVY', 'USERPROFILE': 'C:\\Users\\HP-ENVY', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'VS160COMCOMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\', 'WINDIR': 'C:\\WINDOWS', 'WSLENV': 'WT_SESSION::WT_PROFILE_ID', 'WT_PROFILE_ID': '{61c54bbd-c2c6-5271-96e7-009a87ff44bf}', 'WT_SESSION': '6f7f1113-1990-469b-82aa-5be2dc8e92e0', 'ZES_ENABLE_SYSMAN': '1'})